{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,kBAASC,EAAcC,EAAUC,GACTC,KAAKC,Q,CAoD7B,SAASJ,EAAcC,EAAUI,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBN,KAAKC,SAAW,GACtCM,YAAW,WACLD,EACFF,EAAQ,CAAEN,WAAUI,cAEpBG,EAAO,CAAEP,WAAUI,a,GAEpBA,E,IAnDMM,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAA0BC,GACxBA,EAAMC,iBAEN,IAAMC,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCV,EAAQiB,SAASH,EAAWI,OAC5BC,EAAOF,SAASF,EAAUG,QAMlC,SAAwBE,EAAQpB,EAAOmB,GACrC,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAGfvB,EAFCuB,EAAI,EACHrB,EAAQqB,EAAIF,GAI3BG,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUI,EAASoB,EAATpB,UACjBqB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAwCC,OAAf5B,EAAS,QAAgB4B,OAAVxB,EAAU,M,IAE3EyB,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUI,EAASoB,EAATpB,UAClBqB,EAAA5B,GAAS6B,OAAOI,QAAQ,sBAAqCF,OAAf5B,EAAS,QAAgB4B,OAAVxB,EAAU,M,KAd7E2B,CAFeb,SAASD,EAAYE,OAEblB,EAAOmB,E","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\nimport Notiflix from 'notiflix';\n\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', handleFormSubmit);\n\nfunction handleFormSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  createPromises(amount, delay, step);\n}\n\nfunction createPromises(amount, delay, step) {\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    const delayTime = delay + i * step;\n    const promise = createPromise(position, delayTime);\n\n    promise\n      .then(({ position, delayTime }) => {\n        Notiflix.Notify.Success(`✅ Fulfilled promise ${position} in ${delayTime}ms`);\n      })\n      .catch(({ position, delayTime }) => {\n        Notiflix.Notify.Failure(`❌ Rejected promise ${position} in ${delayTime}ms`);\n      });\n  }\n}\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\nfunction createPromise(position, delayTime) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delayTime });\n      } else {\n        reject({ position, delayTime });\n      }\n    }, delayTime);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Math","random","delayTime","Promise","resolve","reject","shouldResolve","setTimeout","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","parseInt","value","step","amount","i","then","param","$parcel$interopDefault","Notify","Success","concat","catch","Failure","$ce04d3a99e08e73b$var$createPromises"],"version":3,"file":"03-promises.1061c30f.js.map"}